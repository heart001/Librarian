package com.github.librarian.model.entity;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

public class BorrowerExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table BORROWER
     *
     * @mbg.generated Wed Apr 19 18:06:19 CST 2017
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table BORROWER
     *
     * @mbg.generated Wed Apr 19 18:06:19 CST 2017
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table BORROWER
     *
     * @mbg.generated Wed Apr 19 18:06:19 CST 2017
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BORROWER
     *
     * @mbg.generated Wed Apr 19 18:06:19 CST 2017
     */
    public BorrowerExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BORROWER
     *
     * @mbg.generated Wed Apr 19 18:06:19 CST 2017
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BORROWER
     *
     * @mbg.generated Wed Apr 19 18:06:19 CST 2017
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BORROWER
     *
     * @mbg.generated Wed Apr 19 18:06:19 CST 2017
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BORROWER
     *
     * @mbg.generated Wed Apr 19 18:06:19 CST 2017
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BORROWER
     *
     * @mbg.generated Wed Apr 19 18:06:19 CST 2017
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BORROWER
     *
     * @mbg.generated Wed Apr 19 18:06:19 CST 2017
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BORROWER
     *
     * @mbg.generated Wed Apr 19 18:06:19 CST 2017
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BORROWER
     *
     * @mbg.generated Wed Apr 19 18:06:19 CST 2017
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BORROWER
     *
     * @mbg.generated Wed Apr 19 18:06:19 CST 2017
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table BORROWER
     *
     * @mbg.generated Wed Apr 19 18:06:19 CST 2017
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table BORROWER
     *
     * @mbg.generated Wed Apr 19 18:06:19 CST 2017
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(iter.next().getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        public Criteria andIdIsNull() {
            addCriterion("ID is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("ID is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Integer value) {
            addCriterion("ID =", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Integer value) {
            addCriterion("ID <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Integer value) {
            addCriterion("ID >", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("ID >=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Integer value) {
            addCriterion("ID <", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Integer value) {
            addCriterion("ID <=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Integer> values) {
            addCriterion("ID in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Integer> values) {
            addCriterion("ID not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Integer value1, Integer value2) {
            addCriterion("ID between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Integer value1, Integer value2) {
            addCriterion("ID not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andNameIsNull() {
            addCriterion("NAME is null");
            return (Criteria) this;
        }

        public Criteria andNameIsNotNull() {
            addCriterion("NAME is not null");
            return (Criteria) this;
        }

        public Criteria andNameEqualTo(Boolean value) {
            addCriterion("NAME =", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameNotEqualTo(Boolean value) {
            addCriterion("NAME <>", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameGreaterThan(Boolean value) {
            addCriterion("NAME >", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameGreaterThanOrEqualTo(Boolean value) {
            addCriterion("NAME >=", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameLessThan(Boolean value) {
            addCriterion("NAME <", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameLessThanOrEqualTo(Boolean value) {
            addCriterion("NAME <=", value, "name");
            return (Criteria) this;
        }

        public Criteria andNameIn(List<Boolean> values) {
            addCriterion("NAME in", values, "name");
            return (Criteria) this;
        }

        public Criteria andNameNotIn(List<Boolean> values) {
            addCriterion("NAME not in", values, "name");
            return (Criteria) this;
        }

        public Criteria andNameBetween(Boolean value1, Boolean value2) {
            addCriterion("NAME between", value1, value2, "name");
            return (Criteria) this;
        }

        public Criteria andNameNotBetween(Boolean value1, Boolean value2) {
            addCriterion("NAME not between", value1, value2, "name");
            return (Criteria) this;
        }

        public Criteria andEmailIsNull() {
            addCriterion("EMAIL is null");
            return (Criteria) this;
        }

        public Criteria andEmailIsNotNull() {
            addCriterion("EMAIL is not null");
            return (Criteria) this;
        }

        public Criteria andEmailEqualTo(Double value) {
            addCriterion("EMAIL =", value, "email");
            return (Criteria) this;
        }

        public Criteria andEmailNotEqualTo(Double value) {
            addCriterion("EMAIL <>", value, "email");
            return (Criteria) this;
        }

        public Criteria andEmailGreaterThan(Double value) {
            addCriterion("EMAIL >", value, "email");
            return (Criteria) this;
        }

        public Criteria andEmailGreaterThanOrEqualTo(Double value) {
            addCriterion("EMAIL >=", value, "email");
            return (Criteria) this;
        }

        public Criteria andEmailLessThan(Double value) {
            addCriterion("EMAIL <", value, "email");
            return (Criteria) this;
        }

        public Criteria andEmailLessThanOrEqualTo(Double value) {
            addCriterion("EMAIL <=", value, "email");
            return (Criteria) this;
        }

        public Criteria andEmailIn(List<Double> values) {
            addCriterion("EMAIL in", values, "email");
            return (Criteria) this;
        }

        public Criteria andEmailNotIn(List<Double> values) {
            addCriterion("EMAIL not in", values, "email");
            return (Criteria) this;
        }

        public Criteria andEmailBetween(Double value1, Double value2) {
            addCriterion("EMAIL between", value1, value2, "email");
            return (Criteria) this;
        }

        public Criteria andEmailNotBetween(Double value1, Double value2) {
            addCriterion("EMAIL not between", value1, value2, "email");
            return (Criteria) this;
        }

        public Criteria andPasswordIsNull() {
            addCriterion("PASSWORD is null");
            return (Criteria) this;
        }

        public Criteria andPasswordIsNotNull() {
            addCriterion("PASSWORD is not null");
            return (Criteria) this;
        }

        public Criteria andPasswordEqualTo(String value) {
            addCriterion("PASSWORD =", value, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordNotEqualTo(String value) {
            addCriterion("PASSWORD <>", value, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordGreaterThan(String value) {
            addCriterion("PASSWORD >", value, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordGreaterThanOrEqualTo(String value) {
            addCriterion("PASSWORD >=", value, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordLessThan(String value) {
            addCriterion("PASSWORD <", value, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordLessThanOrEqualTo(String value) {
            addCriterion("PASSWORD <=", value, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordLike(String value) {
            addCriterion("PASSWORD like", value, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordNotLike(String value) {
            addCriterion("PASSWORD not like", value, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordIn(List<String> values) {
            addCriterion("PASSWORD in", values, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordNotIn(List<String> values) {
            addCriterion("PASSWORD not in", values, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordBetween(String value1, String value2) {
            addCriterion("PASSWORD between", value1, value2, "password");
            return (Criteria) this;
        }

        public Criteria andPasswordNotBetween(String value1, String value2) {
            addCriterion("PASSWORD not between", value1, value2, "password");
            return (Criteria) this;
        }

        public Criteria andStatusIsNull() {
            addCriterion("STATUS is null");
            return (Criteria) this;
        }

        public Criteria andStatusIsNotNull() {
            addCriterion("STATUS is not null");
            return (Criteria) this;
        }

        public Criteria andStatusEqualTo(Integer value) {
            addCriterion("STATUS =", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusNotEqualTo(Integer value) {
            addCriterion("STATUS <>", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusGreaterThan(Integer value) {
            addCriterion("STATUS >", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusGreaterThanOrEqualTo(Integer value) {
            addCriterion("STATUS >=", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusLessThan(Integer value) {
            addCriterion("STATUS <", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusLessThanOrEqualTo(Integer value) {
            addCriterion("STATUS <=", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusIn(List<Integer> values) {
            addCriterion("STATUS in", values, "status");
            return (Criteria) this;
        }

        public Criteria andStatusNotIn(List<Integer> values) {
            addCriterion("STATUS not in", values, "status");
            return (Criteria) this;
        }

        public Criteria andStatusBetween(Integer value1, Integer value2) {
            addCriterion("STATUS between", value1, value2, "status");
            return (Criteria) this;
        }

        public Criteria andStatusNotBetween(Integer value1, Integer value2) {
            addCriterion("STATUS not between", value1, value2, "status");
            return (Criteria) this;
        }

        public Criteria andTimesIsNull() {
            addCriterion("TIMES is null");
            return (Criteria) this;
        }

        public Criteria andTimesIsNotNull() {
            addCriterion("TIMES is not null");
            return (Criteria) this;
        }

        public Criteria andTimesEqualTo(Date value) {
            addCriterionForJDBCDate("TIMES =", value, "times");
            return (Criteria) this;
        }

        public Criteria andTimesNotEqualTo(Date value) {
            addCriterionForJDBCDate("TIMES <>", value, "times");
            return (Criteria) this;
        }

        public Criteria andTimesGreaterThan(Date value) {
            addCriterionForJDBCDate("TIMES >", value, "times");
            return (Criteria) this;
        }

        public Criteria andTimesGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("TIMES >=", value, "times");
            return (Criteria) this;
        }

        public Criteria andTimesLessThan(Date value) {
            addCriterionForJDBCDate("TIMES <", value, "times");
            return (Criteria) this;
        }

        public Criteria andTimesLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("TIMES <=", value, "times");
            return (Criteria) this;
        }

        public Criteria andTimesIn(List<Date> values) {
            addCriterionForJDBCDate("TIMES in", values, "times");
            return (Criteria) this;
        }

        public Criteria andTimesNotIn(List<Date> values) {
            addCriterionForJDBCDate("TIMES not in", values, "times");
            return (Criteria) this;
        }

        public Criteria andTimesBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("TIMES between", value1, value2, "times");
            return (Criteria) this;
        }

        public Criteria andTimesNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("TIMES not between", value1, value2, "times");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table BORROWER
     *
     * @mbg.generated do_not_delete_during_merge Wed Apr 19 18:06:19 CST 2017
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table BORROWER
         *
         * @mbg.generated Wed Apr 19 18:06:19 CST 2017
         */
        public Criteria andMap(java.util.Map<String, Object> map) {
            if (map.containsKey("IdEqualTo")){
                 andIdEqualTo((Integer) map.get("IdEqualTo"));
            }
            if (map.containsKey("IdNotEqualTo")){
                 andIdNotEqualTo((Integer) map.get("IdNotEqualTo"));
            }
            if (map.containsKey("IdGreaterThan")){
                 andIdGreaterThan((Integer) map.get("IdGreaterThan"));
            }
            if (map.containsKey("IdGreaterThanOrEqualTo")){
                 andIdGreaterThanOrEqualTo((Integer) map.get("IdGreaterThanOrEqualTo"));
            }
            if (map.containsKey("IdLessThan")){
                 andIdLessThan((Integer) map.get("IdLessThan"));
            }
            if (map.containsKey("IdLessThanOrEqualTo")){
                 andIdLessThanOrEqualTo((Integer) map.get("IdLessThanOrEqualTo"));
            }
            if (map.containsKey("IdIn")){
                 andIdIn((List<Integer>) map.get("IdIn"));
            }
            if (map.containsKey("IdNotIn")){
                 andIdNotIn((List<Integer>) map.get("IdNotIn"));
            }
            if (map.containsKey("NameEqualTo")){
                 andNameEqualTo((Boolean) map.get("NameEqualTo"));
            }
            if (map.containsKey("NameNotEqualTo")){
                 andNameNotEqualTo((Boolean) map.get("NameNotEqualTo"));
            }
            if (map.containsKey("NameGreaterThan")){
                 andNameGreaterThan((Boolean) map.get("NameGreaterThan"));
            }
            if (map.containsKey("NameGreaterThanOrEqualTo")){
                 andNameGreaterThanOrEqualTo((Boolean) map.get("NameGreaterThanOrEqualTo"));
            }
            if (map.containsKey("NameLessThan")){
                 andNameLessThan((Boolean) map.get("NameLessThan"));
            }
            if (map.containsKey("NameLessThanOrEqualTo")){
                 andNameLessThanOrEqualTo((Boolean) map.get("NameLessThanOrEqualTo"));
            }
            if (map.containsKey("NameIn")){
                 andNameIn((List<Boolean>) map.get("NameIn"));
            }
            if (map.containsKey("NameNotIn")){
                 andNameNotIn((List<Boolean>) map.get("NameNotIn"));
            }
            if (map.containsKey("EmailEqualTo")){
                 andEmailEqualTo((Double) map.get("EmailEqualTo"));
            }
            if (map.containsKey("EmailNotEqualTo")){
                 andEmailNotEqualTo((Double) map.get("EmailNotEqualTo"));
            }
            if (map.containsKey("EmailGreaterThan")){
                 andEmailGreaterThan((Double) map.get("EmailGreaterThan"));
            }
            if (map.containsKey("EmailGreaterThanOrEqualTo")){
                 andEmailGreaterThanOrEqualTo((Double) map.get("EmailGreaterThanOrEqualTo"));
            }
            if (map.containsKey("EmailLessThan")){
                 andEmailLessThan((Double) map.get("EmailLessThan"));
            }
            if (map.containsKey("EmailLessThanOrEqualTo")){
                 andEmailLessThanOrEqualTo((Double) map.get("EmailLessThanOrEqualTo"));
            }
            if (map.containsKey("EmailIn")){
                 andEmailIn((List<Double>) map.get("EmailIn"));
            }
            if (map.containsKey("EmailNotIn")){
                 andEmailNotIn((List<Double>) map.get("EmailNotIn"));
            }
            if (map.containsKey("PasswordEqualTo")){
                 andPasswordEqualTo((String) map.get("PasswordEqualTo"));
            }
            if (map.containsKey("PasswordNotEqualTo")){
                 andPasswordNotEqualTo((String) map.get("PasswordNotEqualTo"));
            }
            if (map.containsKey("PasswordGreaterThan")){
                 andPasswordGreaterThan((String) map.get("PasswordGreaterThan"));
            }
            if (map.containsKey("PasswordGreaterThanOrEqualTo")){
                 andPasswordGreaterThanOrEqualTo((String) map.get("PasswordGreaterThanOrEqualTo"));
            }
            if (map.containsKey("PasswordLessThan")){
                 andPasswordLessThan((String) map.get("PasswordLessThan"));
            }
            if (map.containsKey("PasswordLessThanOrEqualTo")){
                 andPasswordLessThanOrEqualTo((String) map.get("PasswordLessThanOrEqualTo"));
            }
            if (map.containsKey("PasswordLike")){
                 andPasswordLike((String) map.get("PasswordLike"));
            }
            if (map.containsKey("PasswordNotLike")){
                 andPasswordNotLike((String) map.get("PasswordNotLike"));
            }
            if (map.containsKey("PasswordIn")){
                 andPasswordIn((List<String>) map.get("PasswordIn"));
            }
            if (map.containsKey("PasswordNotIn")){
                 andPasswordNotIn((List<String>) map.get("PasswordNotIn"));
            }
            if (map.containsKey("StatusEqualTo")){
                 andStatusEqualTo((Integer) map.get("StatusEqualTo"));
            }
            if (map.containsKey("StatusNotEqualTo")){
                 andStatusNotEqualTo((Integer) map.get("StatusNotEqualTo"));
            }
            if (map.containsKey("StatusGreaterThan")){
                 andStatusGreaterThan((Integer) map.get("StatusGreaterThan"));
            }
            if (map.containsKey("StatusGreaterThanOrEqualTo")){
                 andStatusGreaterThanOrEqualTo((Integer) map.get("StatusGreaterThanOrEqualTo"));
            }
            if (map.containsKey("StatusLessThan")){
                 andStatusLessThan((Integer) map.get("StatusLessThan"));
            }
            if (map.containsKey("StatusLessThanOrEqualTo")){
                 andStatusLessThanOrEqualTo((Integer) map.get("StatusLessThanOrEqualTo"));
            }
            if (map.containsKey("StatusIn")){
                 andStatusIn((List<Integer>) map.get("StatusIn"));
            }
            if (map.containsKey("StatusNotIn")){
                 andStatusNotIn((List<Integer>) map.get("StatusNotIn"));
            }
            if (map.containsKey("TimesEqualTo")){
                 andTimesEqualTo((Date) map.get("TimesEqualTo"));
            }
            if (map.containsKey("TimesNotEqualTo")){
                 andTimesNotEqualTo((Date) map.get("TimesNotEqualTo"));
            }
            if (map.containsKey("TimesGreaterThan")){
                 andTimesGreaterThan((Date) map.get("TimesGreaterThan"));
            }
            if (map.containsKey("TimesGreaterThanOrEqualTo")){
                 andTimesGreaterThanOrEqualTo((Date) map.get("TimesGreaterThanOrEqualTo"));
            }
            if (map.containsKey("TimesLessThan")){
                 andTimesLessThan((Date) map.get("TimesLessThan"));
            }
            if (map.containsKey("TimesLessThanOrEqualTo")){
                 andTimesLessThanOrEqualTo((Date) map.get("TimesLessThanOrEqualTo"));
            }
            if (map.containsKey("TimesIn")){
                 andTimesIn((List<Date>) map.get("TimesIn"));
            }
            if (map.containsKey("TimesNotIn")){
                 andTimesNotIn((List<Date>) map.get("TimesNotIn"));
            }
            return this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table BORROWER
     *
     * @mbg.generated Wed Apr 19 18:06:19 CST 2017
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}